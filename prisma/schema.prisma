// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Type {
    id         String      @id @default(cuid())
    libelle    String
    id_user    String
    appliances Appliance[]
}

model Prestation {
    id      String  @id @default(cuid())
    id_user String
    libelle String
    suivis  Suivi[]
}

model Appliance {
    id      String @id @default(cuid())
    id_user String
    libelle String
    id_type String @unique
    type    Type   @relation(fields: [id_type], references: [id], onDelete: Cascade)
    pov     Pov?
}

model Client {
    id       String    @id @default(cuid())
    id_user  String
    libelle  String
    secteur  String
    activite String
    contacts Contact[]
    pov      Pov?
}

model Contact {
    id        String @id @default(cuid())
    id_user   String
    nom       String
    prenom    String
    telephone String
    email     String
    fonction  String
    id_client String @unique
    client    Client @relation(fields: [id_client], references: [id], onDelete: Cascade)
}

model Participant {
    id        String @id @default(cuid())
    id_user   String
    nom       String
    id_seance String @unique
    seance    Seance @relation(fields: [id_seance], references: [id], onDelete: Cascade)
}

model Seance {
    id           String        @id @default(cuid())
    id_user      String
    date         DateTime
    resume       String
    participants Participant[]
    id_pov       String        @unique
    pov          Pov           @relation(fields: [id_pov], references: [id], onDelete: Cascade)
}

model Suivi {
    id                String     @id @default(cuid())
    id_user           String
    offre_commerciale String
    montant           Float
    compte_rendu      String
    id_prestation     String     @unique
    id_pov            String     @unique
    prestation        Prestation @relation(fields: [id_prestation], references: [id], onDelete: Cascade)
    pov               Pov        @relation(fields: [id_pov], references: [id], onDelete: Cascade)
}

model Pov {
    id                      String    @id @default(cuid())
    id_user                 String
    libelle                 String
    date_debut              DateTime
    date_fin                DateTime
    description             String
    compte_manager          String
    ingenieur_cybersecurite String
    analyste_cybersecurite  String
    suivis                  Suivi[]
    seances                 Seance[]
    id_client               String    @unique
    client                  Client    @relation(fields: [id_client], references: [id], onDelete: Cascade)
    id_appliance            String    @unique
    appliance               Appliance @relation(fields: [id_appliance], references: [id], onDelete: Cascade)
}
